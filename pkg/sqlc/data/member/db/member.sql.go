// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: member.sql

package memberData

import (
	"context"

	"github.com/google/uuid"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
  id,
  role_id,
  user_id,
  class_id
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, role_id, user_id, class_id, deleted_at, created_at, updated_at
`

type CreateMemberParams struct {
	ID      uuid.UUID `json:"id"`
	RoleID  uuid.UUID `json:"role_id"`
	UserID  uuid.UUID `json:"user_id"`
	ClassID uuid.UUID `json:"class_id"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.ID,
		arg.RoleID,
		arg.UserID,
		arg.ClassID,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.UserID,
		&i.ClassID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
UPDATE members
SET deleted_at = now()
WHERE user_id = $1
AND class_id = $2
AND deleted_at IS NULL
`

type DeleteMemberParams struct {
	UserID  uuid.UUID `json:"user_id"`
	ClassID uuid.UUID `json:"class_id"`
}

func (q *Queries) DeleteMember(ctx context.Context, arg DeleteMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteMember, arg.UserID, arg.ClassID)
	return err
}

const getMember = `-- name: GetMember :one
SELECT
  id,
  role_id,
  user_id,
  class_id
FROM members
WHERE user_id = $1
AND class_id = $2
AND deleted_at IS NULL
LIMIT 1
`

type GetMemberParams struct {
	UserID  uuid.UUID `json:"user_id"`
	ClassID uuid.UUID `json:"class_id"`
}

type GetMemberRow struct {
	ID      uuid.UUID `json:"id"`
	RoleID  uuid.UUID `json:"role_id"`
	UserID  uuid.UUID `json:"user_id"`
	ClassID uuid.UUID `json:"class_id"`
}

func (q *Queries) GetMember(ctx context.Context, arg GetMemberParams) (GetMemberRow, error) {
	row := q.db.QueryRowContext(ctx, getMember, arg.UserID, arg.ClassID)
	var i GetMemberRow
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.UserID,
		&i.ClassID,
	)
	return i, err
}
