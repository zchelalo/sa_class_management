// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package roleData

import (
	"context"
)

const getRoleByID = `-- name: GetRoleByID :one
SELECT
  id,
  key
FROM roles
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

type GetRoleByIDRow struct {
	ID  string `json:"id"`
	Key string `json:"key"`
}

func (q *Queries) GetRoleByID(ctx context.Context, id string) (GetRoleByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i GetRoleByIDRow
	err := row.Scan(&i.ID, &i.Key)
	return i, err
}

const getRoleByKey = `-- name: GetRoleByKey :one
SELECT
  id,
  key
FROM roles
WHERE key = $1
AND deleted_at IS NULL
LIMIT 1
`

type GetRoleByKeyRow struct {
	ID  string `json:"id"`
	Key string `json:"key"`
}

func (q *Queries) GetRoleByKey(ctx context.Context, key string) (GetRoleByKeyRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleByKey, key)
	var i GetRoleByKeyRow
	err := row.Scan(&i.ID, &i.Key)
	return i, err
}
